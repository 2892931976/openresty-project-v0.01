# 流量复制/AB测试/协程
server {
    listen       8689;
    server_name  127.0.0.1;
    charset utf8;
    default_type application/json;
    set $project_path /mnt/hgfs/Linux-Share/Lua/;  # 定义项目根目录，如项目放在/home/www/
    lua_code_cache off;

    location /test1 {
        keepalive_timeout 60s;
        keepalive_requests 1000;
        content_by_lua_block {
            ngx.print("test1 : ", ngx.req.get_uri_args()["a"])
            ngx.log(ngx.ERR, "request test1")
        }
    }
    location /test2 {
        keepalive_timeout 60s;
        keepalive_requests 1000;
        content_by_lua_block {
            ngx.print("test2 : ", ngx.req.get_uri_args()["a"])
            ngx.log(ngx.ERR, "request test2")
        }
    }

    location /test {
         lua_socket_connect_timeout 3s;
         lua_socket_send_timeout 3s;
         lua_socket_read_timeout 3s;
         lua_socket_pool_size 100;
         lua_socket_keepalive_timeout 60s;
         lua_socket_buffer_size 8k;

         content_by_lua_block {
             local res1, res2 = ngx.location.capture_multi{
                   { "/test1", { args = ngx.req.get_uri_args() } },
                   { "/test2", { args = ngx.req.get_uri_args()} },
             }
             if res1.status == ngx.HTTP_OK then
                 ngx.print(res1.body)
             end
             if res2.status ~= ngx.HTTP_OK then
                --记录错误
             end
         }
    }

    #--------------------------------
    location /api1 {
        echo_sleep 3;
        echo api1 : $arg_a;
    }
    location /api2 {
        echo_sleep 3;
        echo api2 : $arg_a;
    }

    #-----------------串行实现
    location /serial {
        content_by_lua '
            local t1 = ngx.now()
            local res1 = ngx.location.capture("/api1", {args = ngx.req.get_uri_args()})
            local res2 = ngx.location.capture("/api2", {args = ngx.req.get_uri_args()})
            local t2 = ngx.now()
            ngx.print(res1.body, "<br/>", res2.body, "<br/>", tostring(t2-t1))
        ';
    }

    #-----------------ngx.location.capture_multi实现
    location /concurrency1 {
        content_by_lua '
            local t1 = ngx.now()
            local res1,res2 = ngx.location.capture_multi({
                  {"/api1", {args = ngx.req.get_uri_args()}},
                  {"/api2", {args = ngx.req.get_uri_args()}}

            })
            local t2 = ngx.now()
            ngx.print(res1.body, "<br/>", res2.body, "<br/>", tostring(t2-t1))
        ';
    }

    #------------------------协程API实现
    location /concurrency2 {
        content_by_lua '
            local t1 = ngx.now()
            local function capture(uri, args)
               return ngx.location.capture(uri, args)
            end
            local thread1 = ngx.thread.spawn(capture, "/api1", {args = ngx.req.get_uri_args()}) --开启第一个线程； 第一个参数是匿名函数 后面的参数是匿名函数的参数
            local thread2 = ngx.thread.spawn(capture, "/api2", {args = ngx.req.get_uri_args()}) --开启第二个线程
            local ok1, res1 = ngx.thread.wait(thread1)  --等待第一个线程的返回结果
            local ok2, res2 = ngx.thread.wait(thread2)  --等待第二个线程的返回结果
            --local  ok, res = ngx.thread.wait(thread1, thread2)
            local t2 = ngx.now()
            ngx.print(res1.body, "<br/>", res2.body, "<br/>", tostring(t2-t1))
            --ngx.print(res.body, "<br/>", res.body, "<br/>", tostring(t2-t1))

            local t1 = ngx.now()
            local  ok, res = ngx.thread.wait(query_http,query_mysql, query_memcached)
            local t2 = ngx.now()
            ngx.print(res.body, res2.body, tostring(t2-t1))
        ';
    }

}
